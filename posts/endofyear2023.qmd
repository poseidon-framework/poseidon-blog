---
title: "2023 ♥ Poseidon"
author: "Clemens Schmid"
date: "2023-12-20"
categories: [reviews]
description: An opinionated summary of the year's events in and around the Poseidon framework.
image: "isba2023poster_media/house.png"
---

It's late December and the time of the year when work slows down around here. For many of us an opportunity to take a break and to look back, contemplating the achievements of the year. I decided to do so as well and write a bit about Poseidon.

What follows is a subjective account of the events in and around the framework in 2023 - each of my colleagues in the core team (Stephan Schiffels, Ayshin Ghalichi, Thiseas C. Lamnidis, Dhananjaya B. A. Mudiyanselage, Wolfgang Haak and I, Clemens Schmid) would probably emphasise different developments in such a write-up. That is in itself an achievement, because it shows how much the tech-stack, features and services in our little ecosystem have grown this year: beyond the understanding of each of us individually.

## The Poseidon schema

Let's start simple with the two new releases of the Poseidon schema we published this year: 2.7.0 and 2.7.1. They were published in short succession in March and May, the latter only slightly improving the .ssf files added in the first. See the changelog [here](https://www.poseidon-adna.org/#/changelog) for more details, but the addition of the [.ssf file](https://www.poseidon-adna.org/#/ssf_details) is indeed their most remarkable addition to the schema. With it we addressed a major desideratum and unresolved question in previous versions of Poseidon: How should genotype data be linked to the raw sequencing data on the ENA and other archives of the International Nucleotide Sequence Database Collaboration?

The .ssf file is, I would argue, a smart solution for this question. It specifies the very variables already used in the ENA database, allows for an extremely flexible, yet not arbitrary n:m connection between the entities in a Poseidon package and the raw data products and it can be generated semi-automatically for most of the data in our public archives. It can also be used to organize local data repositories independent of public databases. The .ssf file is finally the very foundation on top of which the amazing Minotaur workflow is built (see below).

Generally, both the fact that only two Poseidon schema releases were necessary this year and that we could treat them as non-breaking changes indicate that we reached a certain level of maturity and stability here. We certainly have ideas how to extend it further in the future, but at the moment I'm optimistic that we can maintain long-term backwards compatibility. The process in which we discussed, specified and later improved the .ssf file definition to only then build Minotaur on top of it was a very satisfying professional experience.

## The Minotaur workflow

The Minotaur workflow is a semi-automatic workflow to reproducibly process published sequencing data into Poseidon packages. Developing that became possible, because Thiseas joined the Poseidon core team in 2023. He came up with a sophisticated, yet open and transparent implementation of this process, where authors maintain agency over data and data processing parameters. A full write-up for the website is [in progress](https://github.com/poseidon-framework/poseidon-framework.github.io/pull/54), so here is the summary Thiseas prepared for our poster at the ISBA conference:

Community members can request new packages by submitting a build recipe as a Pull Request against a dedicated GitHub repository. This recipe is created from a Sequencing Source File (.ssf), describing the sequencing data for the package and where it can be downloaded. Using the recipe, the sequencing data gets processed through [nf-core/eager](https://nf-co.re/eager) on computational infrastructure of MPI-EVA, using a standardised, yet flexible, set of parameters. The generated genotypes, together with descriptive statistics of the sequencing data (Endogenous, Damage, Nr_SNPs, Contamination), are compiled into a Poseidon package, and made available to users in the minotaur-archive.

The Minotaur workflow is a timely addition to the Poseidon framework, providing a flexible solution to wrap legacy data in uniformly processed packages. Homogeneous data processing puts us closer to our great comparadum, [the AADR dataset](https://reich.hms.harvard.edu/allen-ancient-dna-resource-aadr-downloadable-genotypes-present-day-and-ancient-dna-data). It also helped us to finalize the structure of our public archives, which emerged from long discussions about the kind of data the aDNA community probably requires for derived analyses.

Right now the Minotaur workflow is still in a final development and testing phase, where we focus on the processes around it, so mainly the submission of recipes, review and the forwarding of results to the minotaur-archive. One particular tricky question is how context information in the .janno file should be forwarded from the community-archive to the packages in the minotaur-archive. [One of the last pull requests](https://github.com/poseidon-framework/poseidon-hs/pull/282) for trident in 2023 aims to introduce a reliable mechanism to merge .janno files to address this issue.

## The public archives

In 2023 we finally came to a conclusion on how our public data archives should be organized. What emerged is a threefold division into what we call the community-archive, the minotaur-archive and the aadr-archive. The archives are described in more detail [here](https://www.poseidon-adna.org/#/archive_overview), but here's the gist of it:

The community-archive emerged from our old public-archive. It therefore includes the legacy data we originally copied from the AADR. We now decided to use this archive for author-submitted publication-wise packages to collect the exact genotype data analysed in the paper. The idea is twofold: With the author-submitted genotype data the results in the paper can be reproduced exactly. And the publication authors are generally the most reliable authority for the context data we collect in the .janno file, e.g. the spatiotemporal origin of the samples.

The minotaur-archive mirrors the community-archive in that it features publication-wise packages, sometimes even the very same as the PCA. To distinguish them clearly, package titles and sample-wise Poseidon_IDs in it carry the suffix _MNT. As explained above the packages in this archive include consistently reprocessed genotype data, run through the Minotaur workflow.

The aadr-archive is the conceptionally most simple archive. It features “poseidonized” versions of releases of the AADR dataset. The code and decisions for the cleaning and packaging process are documented [here](https://github.com/poseidon-framework/aadr2poseidon).

2023 not only saw the planning of these archives, but also a lot of work to fill them with life. For the community archive that meant plenty of data cleaning and providing guidance for authors to submit their data. Thanks to the work of Ayshin we saw a lot of progress here with a total of eleven author-submitted packages in the archive now. Number twelve was [submitted shortly before christmas](https://github.com/poseidon-framework/community-archive/pull/151) and is awaiting review now. For the minotaur-archive I already pointed out above what was necessary. It is still functionally empty, but three packages [are pending](https://github.com/poseidon-framework/minotaur-archive/pulls) and will hopefully soon be merged. Preparing the latest version of the AADR dataset for the aadr-archive was one of the projects I tackled this year.

## The software tools

The Poseidon software tools grew significantly more powerful this year. From a user-perspective 2023 brought various new features, changes to the command line interfaces and breaking updates of the Web-API. To keep track of the releases and the Poseidon schema versions they support we created a neat [version overview table](https://www.poseidon-adna.org/#/version_table) on the website.

With qjanno I added an entirely new tool to the set. It is a command line tool to run SQL queries on .janno (and arbitrary .csv and .tsv) files. I created it by forking the [qsh package](https://github.com/itchyny/qhs) and then adjusting it heavily for the use on Poseidon packages. Just as trident it is written in Haskell and openly available in precompiled executables [here](https://www.poseidon-adna.org/#/qjanno).

Stephan invested a good amount of effort into consolidating the data analysis features in xerxes. He wrote a [whitepaper](https://github.com/poseidon-framework/poseidon-analysis-hs/blob/main/docs/xerxes_whitepaper.pdf) to explain and justify the reasoning behind the implemented logic. Together we worked on integrating the many changes to trident and its underlying poseidon-hs Haskell library also into xerxes.

Our main workhorse, trident, saw an astonishing number of new releases: `v1.1.6.0` on January 8 to `v1.4.0.3` on October 30. I went through the [extended changelogs](https://github.com/poseidon-framework/poseidon-hs/releases) published with each release and summarized the user-facing highlights of what trident supports now:

- Arbitrary columns in the .janno file beyond the columns specified in the Poseidon schema (v1.1.6.0)
- Specification of individuals with identical names from different source packages in the `forge` selection language (v1.1.7.0)
- Validation of the entire genotype data in a package with `--fullGeno` in `validate` (v1.1.10.2)
- Poseidon schema version v2.7.1 with validation of the .ssf file (v1.1.12.0)
- A highly improved Poseidon [Web-API](https://www.poseidon-adna.org/#/web_api) that supports requesting individual (old) package versions (v1.2.0.0)
- Reworked versions of `trident update`, now called `trident rectify`, and `trident validate`, which now allows to validate not just entire packages, but also individual files (v1.3.0.4)
- Selecting packages by version in the forge selection language and generally handling multiple package versions (v1.4.0.2)

As always I enjoyed the work on the software tools tremendously, especially in two cases: If one of our power uses requests a change and we can address a concrete need with a release and if the Haskell programming language allows for a particularly elegant solution for a given problem. A [currently pending pull request](https://github.com/poseidon-framework/poseidon-hs/pull/283) combines both: Ayshin made me aware of some validation failure cases that require better error messages and I found a neat way to provide just that with a custom-tailored monadic stack.

## Outreach

https://blog.poseidon-adna.org/posts/isba2023poster.html

## Outlook
